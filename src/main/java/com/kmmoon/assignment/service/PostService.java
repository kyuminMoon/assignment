package com.kmmoon.assignment.service;import com.kmmoon.assignment.dto.CursorResultDTO;import com.kmmoon.assignment.dto.ListResultDTO;import com.kmmoon.assignment.dto.PostDTO;import com.kmmoon.assignment.dto.PostResponseDTO;import com.kmmoon.assignment.entity.Post;import com.kmmoon.assignment.entity.PostLike;import com.kmmoon.assignment.entity.PostLikeId;import com.kmmoon.assignment.entity.User;import com.kmmoon.assignment.exception.CustomException;import com.kmmoon.assignment.exception.ErrorStatus;import com.kmmoon.assignment.repository.PostLikeRepository;import com.kmmoon.assignment.repository.PostRepository;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.data.domain.Pageable;import org.springframework.stereotype.Service;import java.util.List;import java.util.stream.Collectors;@Slf4j@RequiredArgsConstructor@Servicepublic class PostService {    private final PostRepository postRepository;    private final PostLikeRepository postLikeRepository;    public PostResponseDTO findPostById(User user, Long postId) {        Post post = getPostById(postId);        return toPostResponseDTO(user, post);    }    public CursorResultDTO<PostResponseDTO> findPostByPage(User user, Long cursorId, Pageable page) {        List<Post> posts = getPosts(cursorId, page);        Long lastIdOfList = posts.isEmpty() ?                null : posts.get(posts.size() - 1).getId();        List<PostResponseDTO> postResponseDTOList = posts.stream().map(post -> toPostResponseDTO(user, post)).collect(Collectors.toList());        return new CursorResultDTO<>(postResponseDTOList, hasNext(lastIdOfList));    }    private PostResponseDTO toPostResponseDTO(User user, Post post){        boolean isLike = user != null && postLikeRepository.findById(PostLikeId.builder().post(post.getId()).user(user.getId()).build()).isPresent();        return PostResponseDTO.builder()                .postId(post.getId())                .title(post.getTitle())                .content(post.getContent())                .nickname(post.getUser().getNickname())                .accountType(post.getUser().getAccountType())                .createdAt(post.getCreatedAt())                .lastModifiedAt(post.getLastModifiedAt())                .likeCount(post.getLikeCount())                .isLike(isLike)                .build();    }    private List<Post> getPosts(Long cursorId, Pageable pageable){        return cursorId == null ?                postRepository.findAllByActiveOrderByIdDesc(true, pageable) :                postRepository.findByIdLessThanAndActiveOrderByIdDesc(cursorId, true, pageable);    }    private Boolean hasNext(Long cursorId) {        if (cursorId == null) return false;        return postRepository.existsByIdLessThanAndActive(cursorId, true);    }    public PostResponseDTO modifyPost(User user, Long postId, PostDTO postDTO){        Post post = getPostById(postId);        if(post.getUser().getId() == user.getId())            post = postRepository.save(post.modify(postDTO));        else            throw new CustomException(ErrorStatus.INVALID_USER, "No permission");        return toPostResponseDTO(user, post);    }    public PostResponseDTO createPost(User user, PostDTO postDTO) {        Post post = postRepository.save(postDTO.of(user));        return toPostResponseDTO(user, post);    }    public void likePost(User user, Long postId) {        Post post = getPostById(postId);        // 멀티키이며, 키가 동일하여 upsert        postLikeRepository.save(PostLike.builder()                .post(post)                .user(user)                .build()        );    }    public void deletePost(User user, Long postId) {        Post post = getPostById(postId);        if(post.getUser().getId() == user.getId())            postRepository.save(post.delete());        else            throw new CustomException(ErrorStatus.INVALID_USER, "No permission");    }    private Post getPostById(Long postId){        return postRepository.findById(postId).orElseThrow(() -> new CustomException(ErrorStatus.RESOURCE_NOT_FOUND, "The target resource does not exist."));    }    public ListResultDTO<PostResponseDTO> findPostByIsLike(Long userId) {        List<PostLike> postLikes = postLikeRepository.findByUserId(userId);        List<PostResponseDTO> postResponseDTOList = postLikes.stream().map(postLike ->            PostResponseDTO.builder()                    .postId(postLike.getPost().getId())                    .title(postLike.getPost().getTitle())                    .content(postLike.getPost().getContent())                    .nickname(postLike.getPost().getUser().getNickname())                    .accountType(postLike.getPost().getUser().getAccountType())                    .createdAt(postLike.getPost().getCreatedAt())                    .lastModifiedAt(postLike.getPost().getLastModifiedAt())                    .likeCount(postLike.getPost().getLikeCount())                    .build()        ).collect(Collectors.toList());        return new ListResultDTO<>(postResponseDTOList, postResponseDTOList.size());    }}