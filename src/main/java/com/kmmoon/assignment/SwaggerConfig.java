package com.kmmoon.assignment;import io.swagger.v3.oas.models.Components;import io.swagger.v3.oas.models.OpenAPI;import io.swagger.v3.oas.models.info.Contact;import io.swagger.v3.oas.models.info.Info;import io.swagger.v3.oas.models.info.License;import io.swagger.v3.oas.models.security.SecurityRequirement;import io.swagger.v3.oas.models.security.SecurityScheme;import io.swagger.v3.oas.models.servers.Server;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import java.util.Arrays;@Configurationpublic class SwaggerConfig {    @Value("${spring.application.name}")    private String appName;    @Value("${server.port}")    private String port;    @Bean    public OpenAPI openAPI(@Value("#{systemProperties['git.tag.version']}") String version) {        String url = "http://localhost:"+ port +"/";        Info info = new Info().title(appName).version(version)                .description("앱 개발시 사용되는 서버 API에 대한 연동 문서입니다.")                .termsOfService("http://swagger.io/terms/")                .contact(new Contact().name("kmmoon").url("https://github.com/kyuminMoon").email("nemesis1825@gmail.com"))                .license(new License().name("kmmoon").url("https://github.com/kyuminMoon"));        /*         * TODO : HTTP authentication: unsupported scheme 'lessor' 관련 처리법 확인중...         * bearer 등 기존 형식 이외엔 지원하지 않는듯 하여 현재는 postman이나 RestfulTool로 확인해야 하는듯?         */        SecurityScheme securityLessorScheme = new SecurityScheme()                .type(SecurityScheme.Type.HTTP)                .scheme("Lessor")                .in(SecurityScheme.In.HEADER)                .name("Authorization");        SecurityScheme securityRealtorScheme = new SecurityScheme()                .type(SecurityScheme.Type.HTTP)                .scheme("Realtor")                .in(SecurityScheme.In.HEADER)                .name("Authorization");        SecurityScheme securityLesseeScheme = new SecurityScheme()                .type(SecurityScheme.Type.HTTP)                .scheme("Lessee")                .in(SecurityScheme.In.HEADER)                .name("Authorization");        SecurityRequirement schemaLessorRequirement = new SecurityRequirement().addList("Lessor").addList("Realtor").addList("Lessee");        return new OpenAPI()                .components(new Components()                        .addSecuritySchemes("Lessor", securityLessorScheme)                        .addSecuritySchemes("Realtor", securityRealtorScheme)                        .addSecuritySchemes("Lessee", securityLesseeScheme)                )                .security(Arrays.asList(schemaLessorRequirement))                .addServersItem(new Server().url(url))                .info(info);    }}